{{- if .Values.s3.enabled }}
{{- $s3Config := .Values.s3.configuration }}
{{- $s3GatewayEnabled := and .Values.filer.s3Gateway.enabled (not .Values.s3.enabled) }}
{{- $s3GatewayConfig := .Values.global.s3Gateway }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "seaweedfs.name" . }}-s3
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.s3.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: s3
  template:
    metadata:
      {{- if .Values.s3.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.s3.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: s3
    spec:
      restartPolicy: {{ default .Values.global.restartPolicy .Values.s3.restartPolicy }}
      {{- if .Values.s3.tolerations }}
      tolerations:
        {{ tpl .Values.s3.tolerations . | nindent 8 | trim }}
      {{- end }}
      {{- include "seaweedfs.imagePullSecrets" . | nindent 6 }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.s3.priorityClassName }}
      priorityClassName: {{ .Values.s3.priorityClassName | quote }}
      {{- end }}
      enableServiceLinks: false
      {{- if .Values.s3.serviceAccountName }}
      serviceAccountName: {{ .Values.s3.serviceAccountName | quote }}
      {{- end }}
      {{- if .Values.s3.initContainers }}
      initContainers:
        {{ tpl .Values.s3.initContainers . | nindent 8 | trim }}
      {{- end }}
      containers:
        - name: seaweedfs
          image: {{ template "s3.image" . }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.global.imagePullPolicy }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SEAWEEDFS_FULLNAME
              value: "{{ template "seaweedfs.name" . }}"
            {{- if .Values.global.extraEnvironmentVars }}
            {{- range $key, $value := .Values.global.extraEnvironmentVars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - | 
              exec /usr/bin/weed \
              -logtostderr=true \
              -v={{ .Values.global.loggingLevel }} \
              s3 \
              -ip.bind={{ .Values.s3.bindAddress }} \
              -port={{ $s3GatewayConfig.ports.http }} \
              {{- if and .Values.global.monitoring.enabled $s3Config.ports.metrics }}
              -metricsPort {{ $s3Config.ports.metrics }} \
              {{- end }}
              {{- if and .Values.global.tls.enabled $s3GatewayConfig.ports.https }}
              -port.https={{ $s3GatewayConfig.httpsPort | int }} \
              -cert.file=/usr/local/share/ca-certificates/client/tls.crt \
              -key.file=/usr/local/share/ca-certificates/client/tls.key \
              {{- end }}
              {{- if $s3GatewayConfig.domainName }}
              -domainName={{ $s3GatewayConfig.domainName }} \
              {{- end }}
              {{- if $s3GatewayConfig.allowEmptyFolder }}
              -allowEmptyFolder={{ $s3GatewayConfig.allowEmptyFolder }} \
              {{- end }}
              {{- if $s3GatewayConfig.auth.enabled }}
              -config=/etc/sw/s3/config/config.json \
              {{- end }}
              {{- if $s3GatewayConfig.auditLog.jsonContents }}
              -auditLogConfig=/etc/sw/s3/auditLog/config.json \
              {{- end }}
              -filer={{ template "seaweedfs.name" . }}-filer-client.{{ .Release.Namespace }}:{{ .Values.filer.configuration.ports.http }}
          volumeMounts:
            {{- if $s3GatewayEnabled }}
            {{- if .Values.global.s3Gateway.auditLog.jsonContents }}
            - name: s3-gateway-audit-log-config
              mountPath: /etc/sw/s3/auditLog/config.json
              subPath: config.json
            {{- end }}
            {{- if .Values.global.s3Gateway.auth.enabled }}
            - name: s3-gateway-auth
              mountPath: /etc/sw/s3/config/config.json
              subPath: config.json
            {{- end }}
            {{- end }}
            {{- if .Values.global.tls.enabled }}
            - name: security-config
              readOnly: true
              mountPath: /etc/seaweedfs/security.toml
              subPath: security.toml
            - name: tls-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificate/
            {{- end }}
            {{ tpl .Values.s3.extraVolumeMounts . | nindent 12 | trim }}
          ports:
            - containerPort: {{ $s3GatewayConfig.ports.http }}
              name: swfs-s3
            {{- if and .Values.global.monitoring.enabled $s3Config.ports.metrics }}
            - containerPort: {{ $s3Config.ports.metrics }}
              name: metrics
            {{- end }}
          {{- if .Values.s3.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.s3.readinessProbe.httpGet.path }}
              port: {{ $s3GatewayConfig.ports.http }}
              scheme: {{ .Values.s3.readinessProbe.scheme }}
            initialDelaySeconds: {{ .Values.s3.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.s3.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.s3.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.s3.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.s3.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.s3.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.s3.livenessProbe.httpGet.path }}
              port: {{ $s3GatewayConfig.ports.http }}
              scheme: {{ .Values.s3.livenessProbe.scheme }}
            initialDelaySeconds: {{ .Values.s3.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.s3.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.s3.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.s3.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.s3.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.s3.resources }}
          resources:
            {{ tpl .Values.s3.resources . | nindent 12 | trim }}
          {{- end }}
      volumes:
        {{- if $s3GatewayEnabled }}
        {{- if .Values.global.s3Gateway.auditLog.jsonContents }}
        - name: s3-gateway-audit-log-config
          configMap:
            name: {{ template "seaweedfs.name" . }}-s3-gateway-audit-log
        {{- end }}
        {{- if .Values.global.s3Gateway.auth.enabled }}
        - name: s3-gateway-auth
          secret:
            defaultMode: 420
            secretName: {{ template "seaweedfs.name" . }}-s3-gateway-auth
        {{- end }}
        {{- end }}
        {{- if .Values.global.tls.enabled }}
        - name: security-config
          configMap:
            name: {{ template "seaweedfs.name" . }}-security-config
        - name: tls-cert
          secret:
            secretName: {{ if .Values.global.tls.existingSecret }}{{ .Values.global.tls.existingSecret }}{{ else }}{{ template "seaweedfs.name" . }}-certificate-tls{{ end }}
        {{- end }}
        {{ tpl .Values.s3.extraVolumes . | indent 8 | trim }}
      {{- if .Values.s3.nodeSelector }}
      nodeSelector:
        {{ tpl .Values.s3.nodeSelector . | indent 8 | trim }}
      {{- end }}
{{- end }}
